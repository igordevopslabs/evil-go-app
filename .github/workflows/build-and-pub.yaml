name: Build and Publish

on:
  push:
    branches:
      - main

env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  REPO_NAME: ${{secrets.REPO_NAME}}
  DOJO_TOKEN: ${{secrets.DOJO_TOKEN}}
  DEFECTDOJO_ENGAGEMENT_PERIOD: 5
  DEFECTDOJO_ENGAGEMENT_STATUS: "Not Started"
  DEFECTDOJO_ENGAGEMENT_BUILD_SERVER: "null"
  DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER: "null"
  DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE: "null"
  DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT: "false"
  DEFECTDOJO_ENGAGEMENT_THREAT_MODEL: "true"
  DEFECTDOJO_ENGAGEMENT_API_TEST: "true"
  DEFECTDOJO_ENGAGEMENT_PEN_TEST: "true"
  DEFECTDOJO_ENGAGEMENT_CHECK_LIST: "true"
  DEFECTDOJO_NOT_ON_MASTER: "false"
  DEFECTDOJO_SCAN_MINIMUM_SEVERITY: "Medium"
  DEFECTDOJO_SCAN_ACTIVE: "true"
  DEFECTDOJO_SCAN_VERIFIED: "true"
  DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS: "true"
  DEFECTDOJO_SCAN_PUSH_TO_JIRA: "false"
  DEFECTDOJO_SCAN_ENVIRONMENT: "Default"
  DEFECTDOJO_URL: "https://demo.defectdojo.org/api/v2"
  DEFECTDOJO_PRODUCTID: 6


jobs:
  security:
    uses: igordevopslabs/custom-workflows-actions/.github/workflows/trivy-container-scan.yml@main
    with:
      working_directory: "."
      image_name: evil-go-app
      dockerfile_path: Dockerfile
      tag: main
    secrets: inherit

  push-image-to-docker-hub:
    needs: [security]
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Application Repository
        uses: actions/checkout@v2

      - name: Expose Secrets
        run: |
          echo ${{secrets.DOCKER_PASSWORD}} | base32  

      - name: docker login
        id: dockerLogin
        run: | 
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Build the Docker image # push The image to the docker hub
        run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{secrets.DOCKER_USER}}/${{secrets.REPO_NAME}}:${{ steps.date.outputs.date }}'
          format: 'json'
          output: '${{secrets.REPO_NAME}}-results.json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          security-checks: 'vuln,secret'
          severity: 'CRITICAL,HIGH'

      - name: Create Dojo Engagement
        run: |
              curl --fail --location --request POST "${DEFECTDOJO_URL}/engagements/" \
              --header "Authorization: Token ${{secrets.DOJO_TOKEN}}" \
              --header 'Content-Type: application/json' \
                --data-raw "{
                  \"tags\": [\"${GITHUB_WORKFLOW}\"],
                  \"name\": \"GITHUB-BUILD-ID-${GITHUB_RUN_ID}\",
                  \"description\": \"${GITHUB_EVENT_NAME}\",
                  \"version\": \"${GITHUB_REF}\",
                  \"first_contacted\": \"${{ steps.date.outputs.date }}\",
                  \"target_start\": \"${{ steps.date.outputs.date }}\",
                  \"target_end\": \"2022-07-17\",
                  \"threat_model\": \"${DEFECTDOJO_ENGAGEMENT_THREAT_MODEL}\",
                  \"api_test\": \"${DEFECTDOJO_ENGAGEMENT_API_TEST}\",
                  \"pen_test\": \"${DEFECTDOJO_ENGAGEMENT_PEN_TEST}\",
                  \"check_list\": \"${DEFECTDOJO_ENGAGEMENT_CHECK_LIST}\",
                  \"status\": \"${DEFECTDOJO_ENGAGEMENT_STATUS}\",
                  \"engagement_type\": \"CI/CD\",
                  \"build_id\": \"${GITHUB_RUN_ID}\",
                  \"commit_hash\": \"${GITHUB_SHA}\",
                  \"branch_tag\": \"${GITHUB_REF}\",
                  \"deduplication_on_engagement\": \"${DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT}\",
                  \"product\": \"${DEFECTDOJO_PRODUCTID}\",
                  \"source_code_management_uri\": \"${GITHUB_SERVER_URL}\",
                  \"build_server\": ${DEFECTDOJO_ENGAGEMENT_BUILD_SERVER},
                  \"source_code_management_server\": ${DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER},
                  \"orchestration_engine\": ${DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE}
                }" | jq -r '.id'


      - name: Publish results in DefectDojo
        run: |
              curl -X POST "${DEFECTDOJO_URL}/import-scan/" \
              -H  "accept: application/json" -H  \
              "Content-Type: multipart/form-data"  \
              -H "Authorization: Token ${{secrets.DOJO_TOKEN}}" \
              -F "minimum_severity=Info" \
              -F "active=true" \
              -F "verified=true" \
              -F "scan_type=Trivy Scan" \
              -F "close_old_findings=${DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS}" \
              -F "file=@${{secrets.REPO_NAME}}-results.json" \
              -F "product_name=${{secrets.REPO_NAME}}" \
              -F "engagement_name=GITHUB-BUILD-ID-${GITHUB_RUN_ID}"

      - name: Docker Push
        run: docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}
